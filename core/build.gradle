ext['tomcat.version'] = '10.1.20'

tasks {
    processResources {
        duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.INCLUDE
    }
}

dependencies {
    api 'org.springframework.boot:spring-boot-starter-webflux'
    api 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.3'
    api 'org.json:json:20230618'
    api 'com.fasterxml.jackson.core:jackson-databind'
    api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    api 'io.jsonwebtoken:jjwt-api:0.12.5'

    //mapping 을 위한 라이브러리 modelmapper 는 런타임에 매핑을 동적으로 처리 > 유연, 커스텀이 유연함.
    api 'org.modelmapper:modelmapper:3.1.1'
    //mapping 을 위한 라이브러리 mapstruct 는 컴파일 에 매핑 코드를 생성, 성능이 뛰어남
    api 'org.mapstruct:mapstruct:1.5.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.2.Final'

    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
}

// 리소스 분리
sourceSets {
    main {
        resources {
            srcDirs "src/main/resources/", "../src/main/resources/"
        }
    }
}

bootJar.enabled(false)
jar.enabled(true)
